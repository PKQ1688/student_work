[
    {
        "input": "Can I search 1 videos about latest smartphone reviews 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 2 videos about funny sketch comedy 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 9 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 1 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 2 videos about how to bake a chocolate cake?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 5 videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 7 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 10 videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 3 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 8 videos about how to bake a chocolate cake based on the rating filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 8 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 6 videos about how to bake a chocolate cake based on the rating filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 7 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 5 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 9 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 10 videos about 30 minute yoga for beginners based on the view count filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 2 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=2\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 6 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 1 videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 6 videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 4 videos about latest smartphone reviews 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 7 videos about latest smartphone reviews 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 1 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 10 videos about quantum physics lectures based on the rating filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 7 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 8 videos about top 10 pop music videos 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 4 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 7 videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 3 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 10 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 10 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 3 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 5 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 3 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 10 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 10 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 4 videos about latest smartphone reviews 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 5 videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 7 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 1 videos about funny sketch comedy 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 1 videos about quantum physics lectures based on the rating filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 9 videos about quantum physics lectures based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 10 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 10 videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 9 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 7 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 6 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 1 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 8 videos about latest smartphone reviews 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 10 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 1 videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 3 videos about top 10 pop music videos 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 1 videos about how to bake a chocolate cake?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=1\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 7 videos about quantum physics lectures?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 7 videos about how to bake a chocolate cake based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 9 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 1 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 10 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 3 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 3 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 8 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 8 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 10 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 9 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 10 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 10 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 5 videos about documentaries about ancient civilizations?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 9 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=9\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 5 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 4 videos about documentaries about ancient civilizations based on the view count filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 7 videos about latest smartphone reviews 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 6 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 8 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 5 videos about quantum physics lectures?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 2 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 8 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 10 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 6 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 10 videos about documentaries about ancient civilizations?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 8 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 4 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 7 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 4 videos about 30 minute yoga for beginners based on the rating filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 4 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 8 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 8 videos about quantum physics lectures based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 1 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 8 videos about quantum physics lectures based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 5 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 10 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 2 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 10 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 6 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 7 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 7 videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 4 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 2 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 2 videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=2\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 8 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 9 videos about latest smartphone reviews 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 6 videos about quantum physics lectures?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 10 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 1 videos about quantum physics lectures based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 5 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 3 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 4 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 7 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 4 videos about how to bake a chocolate cake based on the rating filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 4 videos about 30 minute yoga for beginners based on the view count filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 5 videos about how to bake a chocolate cake based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 10 videos about top 10 pop music videos 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 1 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=1\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 6 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 3 videos about quantum physics lectures based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 9 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 7 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 8 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 3 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 4 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 10 videos about top 10 pop music videos 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 4 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 1 videos about funny sketch comedy 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 7 videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 6 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 9 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 7 videos about how to bake a chocolate cake based on the rating filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 10 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 2 videos about quantum physics lectures based on the rating filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=2\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 10 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 10 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 1 videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 3 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 3 videos about quantum physics lectures based on the rating filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 4 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 7 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 3 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 10 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 2 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 2 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 9 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=9\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 4 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 1 videos about how to bake a chocolate cake based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=1\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 8 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 5 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 8 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 6 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 8 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 7 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search videos about 30 minute yoga for beginners based on the view count filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 2 videos about how to bake a chocolate cake?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 5 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 2 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 5 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 7 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 6 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 9 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=9\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 9 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 2 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 4 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 8 videos about 30 minute yoga for beginners based on the view count filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 3 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 10 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 3 videos about how to bake a chocolate cake based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 10 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 2 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 10 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 2 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 2 videos about documentaries about ancient civilizations based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=2\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 9 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search videos about quantum physics lectures based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 7 videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 4 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 4 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 4 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 3 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 9 videos about top 10 pop music videos 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 2 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 8 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 10 videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 9 videos about latest smartphone reviews 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 10 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 9 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 3 videos about how to bake a chocolate cake based on the rating filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 5 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 7 videos about top 10 pop music videos 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 9 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=9\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 4 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 2 videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 4 videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 7 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 7 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 6 videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 7 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 4 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 7 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search videos about funny sketch comedy 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 9 videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 2 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 6 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 7 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 2 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 9 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search videos about funny sketch comedy 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 4 videos about how to bake a chocolate cake based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 8 videos about quantum physics lectures?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 3 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 5 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 6 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 5 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 6 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 4 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 10 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search videos about top 10 pop music videos 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 9 videos about how to bake a chocolate cake based on the rating filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 1 videos about quantum physics lectures based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 2 videos about quantum physics lectures?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=2\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 3 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 2 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 6 videos about documentaries about ancient civilizations based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 9 videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=9\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 7 videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=7\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 7 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 1 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 4 videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 10 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 6 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 2 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 8 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 2 videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=2\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 8 videos about top 10 pop music videos 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 3 videos about funny sketch comedy 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 4 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 9 videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 6 videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 9 videos about funny sketch comedy 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 8 videos about latest smartphone reviews 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 9 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 8 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 7 videos about top 10 pop music videos 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 1 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 2 videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 7 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 2 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 6 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 10 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 8 videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search videos about documentaries about ancient civilizations?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search videos about top 10 pop music videos 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 5 videos about documentaries about ancient civilizations based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 2 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=2\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 6 videos about how to bake a chocolate cake based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 7 videos about latest smartphone reviews 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 8 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 5 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 8 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 2 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 3 videos about top 10 pop music videos 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 3 videos about funny sketch comedy 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 9 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=9\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 4 videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 9 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 2 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 5 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 8 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 7 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 1 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 7 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 6 videos about top 10 pop music videos 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 3 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 7 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 6 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 8 videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 5 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 5 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 2 videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=2\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 7 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 4 videos about funny sketch comedy 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 8 videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 5 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 2 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=2\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 1 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 8 videos about how to bake a chocolate cake based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 2 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 7 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search videos about latest smartphone reviews 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 6 videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 5 videos about top 10 pop music videos 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 5 videos about documentaries about ancient civilizations based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 5 videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 4 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 4 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 7 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 4 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 5 videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 2 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 6 videos about funny sketch comedy 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 10 videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 2 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 5 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 2 videos about documentaries about ancient civilizations based on the view count filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=2\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 4 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 10 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 9 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 3 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 10 videos about top 10 pop music videos 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 7 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 3 videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 3 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 8 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 6 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 6 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 2 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=2\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 7 videos about latest smartphone reviews 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 3 videos about top 10 pop music videos 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 3 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 7 videos about top 10 pop music videos 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 2 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 10 videos about quantum physics lectures?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 6 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 8 videos about top 10 pop music videos 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 9 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 7 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 10 videos about quantum physics lectures based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 10 videos about how to bake a chocolate cake based on the rating filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 5 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 8 videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 5 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 9 videos about how to bake a chocolate cake?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 4 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 6 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search videos about quantum physics lectures based on the rating filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 5 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 10 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 10 videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 9 videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 7 videos about top 10 pop music videos 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 7 videos about how to bake a chocolate cake?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 4 videos about how to bake a chocolate cake based on the rating filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 5 videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 2 videos about quantum physics lectures based on the rating filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=2\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 6 videos about latest smartphone reviews 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 10 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 3 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 9 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 7 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 1 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search videos about how to bake a chocolate cake based on the rating filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 5 videos about how to bake a chocolate cake?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 8 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 8 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search videos about how to bake a chocolate cake based on the rating filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search videos about latest smartphone reviews 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 6 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 3 videos about 30 minute yoga for beginners based on the rating filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 1 videos about latest smartphone reviews 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 7 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search videos about latest smartphone reviews 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 8 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 10 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 5 videos about top 10 pop music videos 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 7 videos about documentaries about ancient civilizations based on the view count filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 1 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 9 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 2 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 4 videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 2 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 6 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 1 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 1 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 3 videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 9 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 6 videos about 30 minute yoga for beginners?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 1 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 9 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 2 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 5 videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 9 videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 6 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 6 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 9 videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 8 videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 1 videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=1\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 4 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 6 videos about documentaries about ancient civilizations?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 3 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 7 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 4 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 1 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=1\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 10 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 10 videos about top 10 pop music videos 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 7 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 6 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 7 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 1 videos about funny sketch comedy 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 2 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 4 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 9 videos about how to bake a chocolate cake based on the rating filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 3 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 5 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 5 videos about documentaries about ancient civilizations based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 1 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 1 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=1\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 7 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 6 videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 4 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 10 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 4 videos about 30 minute yoga for beginners based on the rating filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 6 videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 1 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 3 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 5 videos about latest smartphone reviews 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 9 videos about quantum physics lectures based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 4 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 6 videos about top 10 pop music videos 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 8 videos about funny sketch comedy 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 3 videos about funny sketch comedy 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 3 videos about documentaries about ancient civilizations based on the view count filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 8 videos about how to bake a chocolate cake based on the rating filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 1 videos about latest smartphone reviews 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 10 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 10 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 7 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 9 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=9\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 7 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 8 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 10 videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 4 videos about quantum physics lectures based on the rating filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 4 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 1 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 9 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=9\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 7 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 8 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 5 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 2 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 6 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 1 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 7 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 10 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 3 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 3 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 8 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 7 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 2 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 3 videos about quantum physics lectures based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 8 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 5 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 10 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 9 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 4 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 4 videos about top 10 pop music videos 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 9 videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 7 videos about top 10 pop music videos 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 3 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 3 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 3 videos about top 10 pop music videos 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 2 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=2\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search videos about 30 minute yoga for beginners based on the rating filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 7 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 8 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 2 videos about top 10 pop music videos 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 6 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 1 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 10 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 2 videos about latest smartphone reviews 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 4 videos about quantum physics lectures based on the rating filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 4 videos about latest smartphone reviews 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 10 videos about top 10 pop music videos 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 8 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 7 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 3 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 10 videos about top 10 pop music videos 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 1 videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 3 videos about funny sketch comedy 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 1 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 10 videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 10 videos about how to bake a chocolate cake based on the rating filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 8 videos about 30 minute yoga for beginners?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 9 videos about funny sketch comedy 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=9\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 1 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=1\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 9 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 3 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 8 videos about how to bake a chocolate cake based on the rating filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 3 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 4 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 1 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 10 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 8 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 2 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 5 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 2 videos about top 10 pop music videos 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 5 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 3 videos about top 10 pop music videos 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 4 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 3 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 4 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 8 videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 8 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 6 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 3 videos about funny sketch comedy 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 9 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 6 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 5 videos about top 10 pop music videos 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 4 videos about how to bake a chocolate cake?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 2 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 8 videos about quantum physics lectures?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 1 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 7 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 8 videos about 30 minute yoga for beginners based on the view count filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 5 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 3 videos about how to bake a chocolate cake based on the rating filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 8 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 2 videos about documentaries about ancient civilizations based on the view count filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=2\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 7 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 9 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 7 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 4 videos about funny sketch comedy 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 1 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 4 videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 3 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 1 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 3 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 10 videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 7 videos about top 10 pop music videos 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 4 videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 6 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 8 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 3 videos about how to bake a chocolate cake based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 5 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 3 videos about documentaries about ancient civilizations based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 10 videos about funny sketch comedy 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 10 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 8 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 5 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 6 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 5 videos about documentaries about ancient civilizations based on the view count filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 2 videos about funny sketch comedy 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 3 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 7 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search videos about funny sketch comedy 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 5 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 6 videos about 30 minute yoga for beginners based on the view count filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 9 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 2 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 4 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 1 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 2 videos about how to bake a chocolate cake?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 3 videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 3 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 8 videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 2 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 2 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 9 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 4 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 6 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 9 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 1 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 7 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 3 videos about quantum physics lectures based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 8 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 7 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 1 videos about documentaries about ancient civilizations based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=1\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 6 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 2 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=2\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 4 videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 5 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 1 videos about how to bake a chocolate cake?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=1\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 6 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 1 videos about top 10 pop music videos 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 3 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 10 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 1 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=1\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 5 videos about latest smartphone reviews 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 9 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 3 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 7 videos about how to bake a chocolate cake based on the rating filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 3 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 2 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 4 videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 10 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 3 videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 5 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search videos about top 10 pop music videos 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search videos about top 10 pop music videos 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 2 videos about funny sketch comedy 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 6 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 10 videos about latest smartphone reviews 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 2 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 6 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 7 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 6 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 10 videos about quantum physics lectures based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 6 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 5 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 6 videos about funny sketch comedy 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 1 videos about quantum physics lectures?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 6 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 3 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 10 videos about top 10 pop music videos 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 1 videos about 30 minute yoga for beginners based on the view count filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 10 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 4 videos about quantum physics lectures based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 4 videos about how to bake a chocolate cake based on the rating filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 8 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 10 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 9 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 3 videos about top 10 pop music videos 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 8 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 7 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 10 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 7 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 1 videos about how to bake a chocolate cake based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=1\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 4 videos about 30 minute yoga for beginners?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 4 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 9 videos about funny sketch comedy 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=9\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 4 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 6 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 5 videos about documentaries about ancient civilizations based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 3 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 9 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 9 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 1 videos about documentaries about ancient civilizations based on the view count filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=1\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 6 videos about latest smartphone reviews 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 9 videos about documentaries about ancient civilizations?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 6 videos about funny sketch comedy 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 2 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 3 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 5 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 3 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 3 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 3 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 2 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 3 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 10 videos about latest smartphone reviews 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 6 videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search videos about latest smartphone reviews 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search videos about funny sketch comedy 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 8 videos about funny sketch comedy 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 7 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 8 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 7 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 1 videos about quantum physics lectures based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 1 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 5 videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 4 videos about latest smartphone reviews 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 4 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 8 videos about how to bake a chocolate cake?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search videos about quantum physics lectures based on the rating filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 1 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 5 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 10 videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 1 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=1\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 5 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 2 videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 3 videos about quantum physics lectures based on the rating filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 9 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 1 videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=1\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 10 videos about funny sketch comedy 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 8 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 7 videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 3 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 9 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 9 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 10 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 1 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search videos about 30 minute yoga for beginners?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 8 videos about documentaries about ancient civilizations based on the view count filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 10 videos about latest smartphone reviews 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 3 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 9 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 7 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 8 videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 5 videos about how to bake a chocolate cake based on the rating filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 4 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search videos about latest smartphone reviews 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 9 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 2 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 8 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 4 videos about 30 minute yoga for beginners based on the view count filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 8 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 6 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 4 videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 6 videos about latest smartphone reviews 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 8 videos about quantum physics lectures based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 5 videos about latest smartphone reviews 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 9 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 8 videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 5 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 4 videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 2 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 8 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 10 videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 4 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 7 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 8 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 4 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 6 videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 3 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 1 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 5 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 7 videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 4 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 3 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 5 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 2 videos about quantum physics lectures based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=2\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 7 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 4 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 8 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 4 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 9 videos about 30 minute yoga for beginners?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 3 videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 5 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 2 videos about documentaries about ancient civilizations based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=2\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 4 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 10 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 8 videos about quantum physics lectures?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 5 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 8 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 1 videos about quantum physics lectures based on the rating filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 4 videos about funny sketch comedy 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 1 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=1\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 2 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 10 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 1 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=1\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 3 videos about how to bake a chocolate cake based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 10 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 3 videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 10 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 3 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 10 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 3 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 10 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 8 videos about funny sketch comedy 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 2 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 5 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 3 videos about 30 minute yoga for beginners?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 7 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 9 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 3 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 8 videos about 30 minute yoga for beginners?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 7 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 3 videos about how to bake a chocolate cake?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 1 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 4 videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 3 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 2 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 5 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 9 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 10 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 6 videos about quantum physics lectures based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search videos about latest smartphone reviews 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 2 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 5 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 3 videos about how to bake a chocolate cake?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search videos about documentaries about ancient civilizations based on the view count filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 1 videos about quantum physics lectures based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 1 videos about latest smartphone reviews 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 3 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 5 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search videos about top 10 pop music videos 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 9 videos about latest smartphone reviews 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 2 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 10 videos about how to bake a chocolate cake based on the rating filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search videos about documentaries about ancient civilizations?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 5 videos about top 10 pop music videos 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 6 videos about quantum physics lectures?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 4 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 2 videos about funny sketch comedy 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 3 videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 5 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 1 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 3 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 3 videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 5 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 10 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 8 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 6 videos about how to bake a chocolate cake based on the rating filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 3 videos about latest smartphone reviews 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 10 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 10 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 9 videos about funny sketch comedy 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=9\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 5 videos about latest smartphone reviews 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 3 videos about latest smartphone reviews 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 6 videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 8 videos about quantum physics lectures based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 6 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 9 videos about quantum physics lectures based on the view count filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=9\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 5 videos about how to bake a chocolate cake based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 1 videos about latest smartphone reviews 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 5 videos about how to bake a chocolate cake based on the rating filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 10 videos about top 10 pop music videos 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 9 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 3 videos about latest smartphone reviews 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 7 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 6 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 8 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 3 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 5 videos about funny sketch comedy 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 10 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 3 videos about 30 minute yoga for beginners?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 10 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 8 videos about quantum physics lectures based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 5 videos about funny sketch comedy 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 9 videos about quantum physics lectures based on the rating filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=9\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 1 videos about top 10 pop music videos 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 2 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 8 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 8 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 3 videos about documentaries about ancient civilizations?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 8 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 3 videos about top 10 pop music videos 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 1 videos about top 10 pop music videos 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 6 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 6 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 1 videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 8 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 3 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 7 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 6 videos about how to bake a chocolate cake based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 6 videos about top 10 pop music videos 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 9 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 4 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 2 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 2 videos about top 10 pop music videos 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 5 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 4 videos about latest smartphone reviews 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 6 videos about funny sketch comedy 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 4 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 10 videos about documentaries about ancient civilizations?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 9 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search videos about top 10 pop music videos 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 5 videos about top 10 pop music videos 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 4 videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 5 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 2 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=2\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 7 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=7\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 2 videos about documentaries about ancient civilizations?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=2\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 5 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 1 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 9 videos about top 10 pop music videos 2024.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 6 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 3 videos about how to bake a chocolate cake based on the rating filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 7 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 9 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 3 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=3\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 1 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=1\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 5 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 10 videos about latest smartphone reviews 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 3 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 1 videos about top 10 pop music videos 2024 based on the view count filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 3 videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 9 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 4 videos about documentaries about ancient civilizations based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 10 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search videos about 30 minute yoga for beginners?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 3 videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 9 videos about 30 minute yoga for beginners based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 8 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=8\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 5 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 5 videos about latest smartphone reviews 2024.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search videos about documentaries about ancient civilizations based on the rating filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 3 videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 7 videos about latest smartphone reviews 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 9 videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=9\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search videos about 30 minute yoga for beginners based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 7 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 5 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 5 videos about documentaries about ancient civilizations based on the view count filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 1 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 3 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=3\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 8 videos about 30 minute yoga for beginners based on the rating filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 8 videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 1 videos about top 10 pop music videos 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 7 videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 3 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 1 videos about 30 minute yoga for beginners based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 2 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=2\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 6 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=6\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 7 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 9 videos about funny sketch comedy 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 1 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=1\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 2 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "You need to search 5 videos about quantum physics lectures based on the rating filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=5\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 4 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 5 videos about 30 minute yoga for beginners?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 2 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search 10 videos about documentaries about ancient civilizations based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 5 videos about 30 minute yoga for beginners based on the view count filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search videos about top 10 pop music videos 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 4 videos about top 10 pop music videos 2024 based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search videos about funny sketch comedy 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 7 videos about latest smartphone reviews 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=7\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 10 videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 10 videos about documentaries about ancient civilizations.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 6 videos about documentaries about ancient civilizations based on the rating filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=6\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 9 videos about top 10 pop music videos 2024 based on the rating filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 2 videos about latest smartphone reviews 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 10 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 8 videos about 30 minute yoga for beginners based on the view count filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 5 videos about 30 minute yoga for beginners based on the view count filter?",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 7 videos about how to bake a chocolate cake.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 6 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=6\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 8 videos about funny sketch comedy 2024.",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 7 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 1 videos about latest smartphone reviews 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 4 videos about quantum physics lectures based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 5 videos about how to bake a chocolate cake based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=5\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 4 videos about funny sketch comedy 2024 based on the rating filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 1 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 2 videos about how to bake a chocolate cake based on the rating filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=2\", \"search_filter=rating\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 9 videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=9\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 7 videos about documentaries about ancient civilizations based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=7\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search 5 videos about latest smartphone reviews 2024 based on the view count filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=5\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Can I search 1 videos about documentaries about ancient civilizations based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=1\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "To search videos about top 10 pop music videos 2024 based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search 10 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 1 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I need to search 9 videos about how to bake a chocolate cake based on the view count filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=9\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please help me search videos about 30 minute yoga for beginners based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 3 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 3 videos about top 10 pop music videos 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 8 videos about funny sketch comedy 2024?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 5 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How do I search 10 videos about top 10 pop music videos 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 8 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=8\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Could you help me search 3 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=3\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Hi, please search 2 videos about 30 minute yoga for beginners.",
        "output": "<nexa_4>(\"query=\"30 minute yoga for beginners\"\", \"max_results=3\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 1 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=1\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the easiest way to search 8 videos about latest smartphone reviews 2024?",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=8\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 7 videos about how to bake a chocolate cake based on the view count filter?",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=7\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 2 videos about quantum physics lectures based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=2\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I want to search 7 videos about quantum physics lectures.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=7\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 2 videos about latest smartphone reviews 2024 based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"latest smartphone reviews 2024\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Please search 10 videos about how to bake a chocolate cake based on the upload date filter.",
        "output": "<nexa_4>(\"query=\"how to bake a chocolate cake\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is there a way to search 4 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=4\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "Is it possible to search 2 videos about top 10 pop music videos 2024?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 2 videos about funny sketch comedy 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"funny sketch comedy 2024\"\", \"max_results=4\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "I am willing to search videos about quantum physics lectures based on the relevance filter.",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "What's the process for search 10 videos about top 10 pop music videos 2024 based on the upload date filter?",
        "output": "<nexa_4>(\"query=\"top 10 pop music videos 2024\"\", \"max_results=10\", \"search_filter=upload date\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 6 videos about quantum physics lectures based on the view count filter?",
        "output": "<nexa_4>(\"query=\"quantum physics lectures\"\", \"max_results=6\", \"search_filter=view count\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    },
    {
        "input": "How can I search 5 videos about documentaries about ancient civilizations based on the relevance filter?",
        "output": "<nexa_4>(\"query=\"documentaries about ancient civilizations\"\", \"max_results=5\", \"search_filter=relevance\")<nexa_end>\nFunction description: \ndef search_youtube_videos(query, max_results=10, search_filter=\"Relevance\"):\n\"\"\"\nSearches YouTube for videos matching a query.\n\nParameters:\n- query (str): Search query.\n- max_results (int, optional): Maximum number of search results, by\ndefault, use 10. Optional to provide.\n- search_filter (enum, optional): Filter for search results, chosen\nfrom 'Relevance', 'Upload date', 'View Count', 'Rating'. By default,\nuse 'Relevance'. Optional to provide.\n\nReturns:\n- list[str]: A list of strings, each string includes video names and\nURLs.\n\"\"\"\n"
    }
]